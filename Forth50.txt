Forth 50, Charles H. Moore 80


9. septembril 2018 täitus 80 aastat programmeerimiskeele Forth looja Charles H. Moore (Chuck Moore) sünnist (mitte segi ajada Moore'i seaduse autori Gordon E. Moore'ga). Kuna keelel endal on vanust 50 aastat, siis toimus selle aasta EuroForth konverents (järjekorranumbriga 34) tavapärasest pidulikumas õhkkonnas. Ürituse toimumise kohaks oli valitud Edinburghi lähistel asuva Forthi raudteesilla naabruses paiknev Doubletree Hilton Queensferry hotell. Forthi raudteesild (1890) on üks Šotimaa sümboleid ning insenerikunsti saavutusena võrreldav Eiffeli torniga. 
<pilt>

Lisaks konverentsile eelnevale Forth standardikomitee koosolekule ning tavapärasele ettekannete programmile tähistati Forth 50. ja Charles H. Moore 80. juubeleid piduliku banketiga, millel esines sõnavõtuga ka USAst kohalesõitnud Chuck ise. Ta rõhutas, et ennekõike lõi ta Forthi iseenda jaoks ning iseenda lõbuks, teda ei kammitsenud standardid ega reeglid. Forthi võtmepõhimõteteks on lihtsus, minimaalsus ja läbipaistvus. Näitena meenutas juubilar arvutit, millel puudus igasugune sisend ning millega suhtlemiseks sai ära kasutada vaid printeri töövalmiduse indikaatorit (printer on/ei ole ühendatud). Selle ühebitise sisendi kaudu õnnestus arvuti varustada töötava Forth-süsteemiga. 
<pilt>
<pilt2>

Algusaastate Forth oli kasulik töövahend uute riistvaraplatvormide vallutamiseks just oma minimalistlikkuse, adapteeruvuse ja ülekantavuse tõttu. Ettekande lõpetuseks võrdles Chuck enda elutööd samal ajal alustanud Bill Gatesi saavutustega ning tõdes, et rikkuse asemel on ta saanud palju rahuldust tehtust ja rohesti rõõmu.
<pilt>

C. Moore on saanud korraliku hariduse - füüsikabakalaureus MITist (1960) ning kaks aastat matemaatikaõpinguid Stanfordis. Tema LISPi õpetajaks oli John McCarthy, lisaks valdas Chuck kümmetkonda assemblerit ning peaaegu kõiki tol ajal levinud programmeerimiskeeli (Fortran, Algol, Cobol , ...). Forth loodi lähtudes suurest teadmiste, aga veelgi enam praktilise programmeerimise kogemuste baasist lähtudes. 

Forth on ennekõike mõtteviis (aga ka keel, interpretaator ning vajadusel operatsioonisüsteem) riistvaralähedaste (sardsüsteemidele iseloomulike) ülesannete lahendamiseks - kaasaegseteks rakendusvaldkondadeks on kiipkaardid, meditsiinitehnika, makseterminaalid, kosmosetehnika, robootika jne. Kuna ka sõjatööstuses pole Forth tundmatu, siis tegeldi sellega päris tõsiselt isegi omaaegses Nõukogude Liidus. Eestis alustas Forthi tutvustamist Leo Võhandu, kelle entusiasm innustas kolleege nii Tehnikaülikoolis kui ka Tartu Ülikoolis Forthi proovima, lisaks meenuvad tegijatena veel Eesti Raadio arvutuskeskus ja Küberneetika Instituut. Artikli autoril oli õnn töötada Mati Tombaku uurimisrühmas, kus Forth oli kasutusel kompilaatorite ehitamiseks. 

Universaalse programmeerimiskeelena on Forth oma populaarsust mõnevõrra kaotanud võrreldes 1990-ndate aastate keskpaigaga, mida loetakse Forthi tuntuse tipuks. Interpreteeritava interaktiivse keelena võiks ta olla samas nišis Pythoniga, riistvara juhtimisel aga Assembleri või C-ga (1980-ndatel oli aeg, millal C ja Forth tundusid täiesti võrdväärsete valikutena programmeerimiskeelte hulgas). Võib-olla on Forthi leviku takistuseks keele suhteliselt järsk õppimiskõver ning harjumatu süntaks (õigemini selle puudumine - programm on lihtsalt tühikutega eraldatud sõnade jada).

Churles H. Moore töötas Forthi algse versiooni enda töö lihtsustamiseks välja juba 1968. aastaks. 1971. a. kirjutas Chuck Arizonas esimese autonoomse Forth süsteemi raadioteleskoobi juhtimiseks. Laiem avalikkus sai neist ideedest aimu 1980. aasta augustis, kui ilmus populaarse arvutiajakirja BYTE erinumber, mis oli pühendatud keelele Forth. Väga hea ülevaate Forthi ajaloost ja filosoofiast leiab veebisaidilt https://www.forth.com/resources/forth-programming-language/

Paradoksaalsel kombel annab Forth võimaluse ühest küljest soovi korral kontrollida riistvara tasemel iga bitti (puudub läbipaistmatute valmiskomponentide nuhtlus) ning teisest küljest ehitada üles arvutuskunsti abstraktsioonide hierarhiat, mille lennukuse ainsaks piirajaks on looja fantaasia.

Olulised Forthi filosoofia aluspõhimõtted on:
1) Lihtsus, minimaalsus, läbipaistvus: "Keep it simple" (tarkvaratehnikas tuntud ka kui KISS printsiip - "Keep It Simple, Stupid", US Navy 1960). Minimaalsuse tagamine on esmane - näiteks andmete edastamiseks ei looda eraldi pakendeid ning edastusmehhanisme, vaid need tekivad ja ka kasutatakse andmepinu (data stack) kaudu. Sellest tulenevalt on keele süntaks üldistatud RPN (Reverse Polish Notation) ehk postfikskuju. 
2) "Do not speculate" - ära eelda midagi tulevaste võimalike täienduste/laienduste kohta, tee laiendused alles siis, kui neid on tarvis teha (ja usu, et nii saab tulemus parem). Seda põhimõtet on abstraktsioonidega harjunud matemaatikul eriti raske järgida ja uskuda - ikka tahaks "ette mõelda" ja üldistada, aga sellega saaks rikutud minimaalsuse nõue.
3) "Do it yourself" - viia asjad lõpuni ise (aitab järgida teist põhimõtet). Väga sageli tehakse suuri jõupingutusi lootuses, et keegi kunagi saab neid kasutada ja edasi arendada. Tegelikult nii ei juhtu - praktikas alustavad uued tegijad enamasti nullist või selle lähedalt. Forthile on iseloomulik individualistlik lähenemine - ka väga suuri projekte tehakse kas lausa üksi (näit. VLSI CAD süsteem OKAD II) või siis väikeses rühmas. Näiteks Mati Tombaku rühmas oli hiilgeaegadel 6 inimest, aga valmis tehti 2 tööstuslikku translaatorit keeltele Fortran ja Modula-2 ning töötati translaatorite genereerimisega erinevatele arhitektuuridele - Apple II, IBM 360 (EC-1022), PDP-11 (CM-4), Agat, Iskra 226, IBM PC (nii 16 kui ka 32 bitilises variandis).

Klassikalise Forth-süsteemi põhikomponentideks on:
1) Sõnastik, mis sisaldab süsteemile tuntud operatsioone e. sõnu täitmisvalmil kujul, s.t. masinkoodis (kernel words) või punutud koodina (threaded code).
2) Koodiinterpretaator e. sisemine interpretaator programmi sisekuju täitmiseks.
3) Andmepinu (data stack) andmevahetuseks programmide vahel.
4) Juhtimispinu (control stack) programmi suunamiste ja alamprogrammide väljakutsete haldamiseks.
5) Tekstiinterpretaator e. välimine interpretaator sisendvoo sõnade lugemiseks ja interpreteerimiseks.
6) Sõnastike süsteem tekstiinterpretaatoris konteksti ümberlülitamiseks (vajalik näiteks kross-kompileerimiseks, kui ühel riistvaraplatvormil luuakse koodi teise platvormi jaoks).
7) Välismäluga suhtlemise süsteem (näit. failisüsteem).

Forth töötab võimendajana - hea programmeerija saab selle abil oma töö kümneid kordi lihtsamalt ja kiiremini tehtud (võrreldes "tavapäraste" keeltega), halb programmeerija saab Forthis luua täiesti loetamatut, hallatamatut ja kergeltpurunevat koodi.

Pisut võib Forthi võrrelda alpinisti varustusega. See on minimaalne, efektiivne, spetsialiseeritud ja detailideni viimistletud. Seda kasutatakse tippude vallutamiseks väheste poolt ja see ei ole vajalik, mugav ega jõukohane igapäevaseks kasutamiseks. Kui aga kedagi on mägede haigus tabanud, siis see kestab terve elu.

Artikli autori panus Forthi arengusse on tüübisüsteemi loomine pinuoperatsioonide formaalseks kirjeldamiseks. Akadeemilise nõuandjana on J.Pöial kaasatud EuroForth konverentside programmkomitee töösse, talle oli see kümnes EuroForthil osalemine (1990 1991 1993 1994 2002 2003 2006 2008 2017 2018), mis on samuti omamoodi juubel.
<pilt>


Allikad:

http://www.complang.tuwien.ac.at/anton/euroforth/
https://web.archive.org/web/20160414102635/http://colorforth.com/
http://www.greenarraychips.com/home/about/bios.html
https://web.archive.org/web/20080709050817/http://colorforth.com/bio.html
https://web.archive.org/web/20080515140003/http://colorforth.com/HOPL.html
http://worrydream.com/refs/Moore%20-%20Forth%20-%20The%20Early%20Years.pdf
http://www.exemark.com/FORTH/StartingFORTHfromForthWebsitev9_2013_12_24.pdf
https://ia802600.us.archive.org/35/items/byte-magazine-1980-08/1980_08_BYTE_05-08_The_Forth_Language.pdf
https://www.forth.com/resources/forth-programming-language/


